#include <iostream>
#include <vector>

using namespace std;

// Функция, решающая систему линейных уравнений методом Гаусса-Жордана.
void gauss_jordan(vector<vector<double>>& A) {
    int n = A.size(); // количество строк в матрице A
    int m = A[0].size(); // количество столбцов в матрице A

    // Прямой ход метода Гаусса-Жордана
    for (int i = 0; i < n; i++) { // перебираем строки матрицы A
        int k = i;
        for (int j = i + 1; j < n; j++) { // ищем максимальный элемент в столбце i
            if (abs(A[j][i]) > abs(A[k][i])) { // если элемент j больше элемента k, то запоминаем j
                k = j;
            }
        }

        if (abs(A[k][i]) < 1e-9) { // если максимальный элемент в столбце i равен нулю, то переходим к следующей строке
            continue;
        }

        swap(A[i], A[k]); // меняем местами i-ую строку и строку с максимальным элементом в столбце i

        double div = A[i][i]; // делим i-ую строку на A[i][i]
        for (int j = i; j < m; j++) {
            A[i][j] /= div;
        }

        // Вычитаем i-ую строку из всех остальных строк матрицы A, чтобы получить ступенчатую матрицу
        for (int j = 0; j < n; j++) {
            if (j != i) {
                double mult = A[j][i]; // коэффициент, на который нужно умножить i-ую строку, чтобы занулить элемент в j-ой строке и i-ом столбце
                for (int k = i; k < m; k++) {
                    A[j][k] -= mult * A[i][k];
                }
            }
        }
    }
}

int main() {
    vector<vector<double>> A = {
        {2, 1, -1, 8},
        {-3, -1, 2, -11},
        {-2, 1, 2, -3}
    };

    gauss_jordan(A); // решаем систему линейных уравнений методом Гаусса-Жордана

    // Выводим результат
    for (int i = 0; i < A.size(); i++) {
        for (int j = 0; j < A[i].size(); j++) {
            cout << A[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
